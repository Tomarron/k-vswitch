/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/k-vswitch/k-vswitch/apis/generated/clientset/versioned/scheme"
	v1alpha1 "github.com/k-vswitch/k-vswitch/apis/kvswitch/v1alpha1"
	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
	rest "k8s.io/client-go/rest"
)

type KvswitchV1alpha1Interface interface {
	RESTClient() rest.Interface
	VSwitchConfigsGetter
}

// KvswitchV1alpha1Client is used to interact with features provided by the kvswitch.io group.
type KvswitchV1alpha1Client struct {
	restClient rest.Interface
}

func (c *KvswitchV1alpha1Client) VSwitchConfigs() VSwitchConfigInterface {
	return newVSwitchConfigs(c)
}

// NewForConfig creates a new KvswitchV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*KvswitchV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &KvswitchV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new KvswitchV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *KvswitchV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new KvswitchV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *KvswitchV1alpha1Client {
	return &KvswitchV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *KvswitchV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
